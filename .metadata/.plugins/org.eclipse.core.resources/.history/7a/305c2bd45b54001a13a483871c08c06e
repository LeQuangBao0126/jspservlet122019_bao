package mapper;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.commons.lang.StringUtils;
import org.modelmapper.internal.bytebuddy.description.ModifierReviewable.OfAbstraction;

import anotation.Column;
import anotation.Entity;

public class ResultsetMapperToList<T> {
	public List<T> mapRow(ResultSet rs, Class<T> zClass) {
		List<T> results = new ArrayList<>();
		try {
			if (zClass.isAnnotationPresent(Entity.class)) {
				while (rs.next()) {
					T object = zClass.newInstance();				
						ResultSetMetaData resultSetMetadata = rs.getMetaData();
						Field[] fields = zClass.getDeclaredFields();
						for (int i = 0; i < resultSetMetadata.getColumnCount(); i++) {
							String columnName = resultSetMetadata.getColumnName(i+1);//làm gì có cột 0
							Object columnValue = rs.getObject(i+1);							
							for(Field field : fields) {							
								if(field.isAnnotationPresent(Column.class)) {
									Column column = field.getAnnotation(Column.class);
									if(column.name().equals(columnName) && columnValue != null) {				
										BeanUtils.setProperty(object, field.getName(), columnValue);						
										break;
									}
								}
							}						
						}					
					results.add(object);
				}
			}
		} catch (SQLException |IllegalAccessException |InvocationTargetException | InstantiationException e) {
			return results;
		}
       return results;
	}
}
