package repository.impl;

import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import anotation.Column;
import anotation.Table;
import mapper.ResultSetMapper;
import repository.EntityManagerFactory;
import repository.JPArepository;

public class SimpleJPArepository<T> implements JPArepository<T> {
	private Class<T> zClass;

	@SuppressWarnings("unchecked")
	public SimpleJPArepository() {
		Type type = this.getClass().getGenericSuperclass();
		ParameterizedType para = (ParameterizedType) type;
		zClass = (Class<T>) para.getActualTypeArguments()[0];
	}

	// hàm findAll này phuc vụ 2 nhu cầu
	// 1 là truy vấn bảng ko điểu kiện
	// 2 là có điều kiện ...nhờ vào parameter list này
	@Override
	public List<T> findAll(Map<String,Object> params,Object... where) {
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = EntityManagerFactory.getConnection();
		PreparedStatement statement = null;
		ResultSet resultset = null;
		String tableName = "";
		if (connection != null) {
			try {
				if (zClass.isAnnotationPresent(Table.class)) {
					Table table = zClass.getAnnotation(Table.class);
					tableName = table.name();
				}
				StringBuilder sql = new StringBuilder("select * from " + tableName + "");
				if (where != null && where.length == 1) {
					sql.append(where[0]);
				}
				statement = connection.prepareStatement(sql.toString());
				resultset = statement.executeQuery();
				return resultSetMapper.mapRow(resultset, zClass);
			} catch (SQLException e) {
				System.out.println(e.getMessage());
				return new ArrayList<>();
			} finally {
				try {
					connection.close();
					statement.close();
					resultset.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return new ArrayList<>();
	}

	@Override
	public List<T> findAll(String sql, Object... where) {
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = EntityManagerFactory.getConnection();
		Statement statement = null;
		ResultSet resultset = null;

		if (connection != null) {
			try {

				StringBuilder builder = new StringBuilder(sql);
				if (where != null && where.length == 1) {
					builder.append(where[0]);
				}
				statement = connection.createStatement();
				resultset = statement.executeQuery(builder.toString());
				return resultSetMapper.mapRow(resultset, zClass);
			} catch (SQLException e) {
				System.out.println(e.getMessage());
				return new ArrayList<>();
			} finally {
				try {
					connection.close();
					statement.close();
					resultset.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return new ArrayList<>();
	}

	@Override
	public void insert(Object object) {
	String sql = createSQLinsert();
		Connection connection = null;
		PreparedStatement statement = null;
		try {
			connection = EntityManagerFactory.getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql);
			Class<?> aClass = object.getClass();
			int index =1 ;
			for(Field aField : aClass.getDeclaredFields()) {
				aField.setAccessible(true);
				statement.setObject(index, aField.get(object));
				index++;
			}
			statement.executeUpdate();
			connection.commit();
		}catch(SQLException | IllegalAccessException e) {
			if(connection!=null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}finally {
			try {
				connection.close();
				statement.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	private String createSQLinsert() {
		String tableName ="";
		if(zClass.isAnnotationPresent(Table.class)) {
			Table table = zClass.getAnnotation(Table.class);
			tableName = table.name();
		}
		StringBuilder fields = new StringBuilder("");
		StringBuilder params = new StringBuilder("");
		for(Field field : zClass.getDeclaredFields()) {
			if(fields.length() > 1 ) {
				fields.append(",");
				params.append(",");
			}
			if(field.isAnnotationPresent(Column.class)) {
				Column column = field.getAnnotation(Column.class);
				fields.append(column.name());
				params.append("?");
			}
		}
		String sql = "INSERT INTO "+tableName+"("+fields.toString()+") VALUES("+params.toString()+")";
		return sql;
	}

}
