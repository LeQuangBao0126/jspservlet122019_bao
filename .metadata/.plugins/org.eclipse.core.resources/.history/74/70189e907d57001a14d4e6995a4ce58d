package repository.impl;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import anotation.Table;
import mapper.ResultSetMapper;
import repository.EntityManagerFactory;
import repository.JPArepository;

public class SimpleJPArepository<T> implements JPArepository<T> {
	private Class<T> zClass;

	@SuppressWarnings("unchecked")
	public SimpleJPArepository() {
		Type type = this.getClass().getGenericSuperclass();
		ParameterizedType para = (ParameterizedType) type;
		zClass = (Class<T>) para.getActualTypeArguments()[0];
	}
    //hàm findAll này phuc vụ 2 nhu cầu 
	//1 là truy vấn bảng ko điểu kiện
	//2 là có điều kiện ...nhờ vào parameter list này
	@Override
	public List<T> findAll(Object... where) {
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = EntityManagerFactory.getConnection();
		PreparedStatement statement = null;
		ResultSet resultset = null;
		String tableName = "";
		if (connection != null) {
			try {
				if(zClass.isAnnotationPresent(Table.class)) {
					Table table = zClass.getAnnotation(Table.class);
					tableName = table.name();
				}
				StringBuilder sql = new StringBuilder("select * from "+tableName+"") ;
				if(where != null && where.length == 1) {
					sql.append(where[0]);
				}
				statement = connection.prepareStatement(sql.toString());
				resultset= statement.executeQuery();
				return resultSetMapper.mapRow(resultset, zClass);
			}catch(SQLException e ) {
				System.out.println(e.getMessage());
				return new ArrayList<>();
			}finally {
				try {
					connection.close();
					statement.close();
					resultset.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return new ArrayList<>();
	}

	@Override
	public List<T> findAll(String sql, Object... where) {
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = EntityManagerFactory.getConnection();
		PreparedStatement statement = null;
		ResultSet resultset = null;
		String tableName = "";
		if (connection != null) {
			try {
				if(zClass.isAnnotationPresent(Table.class)) {
					Table table = zClass.getAnnotation(Table.class);
					tableName = table.name();
				}
				StringBuilder sql = new StringBuilder("select * from "+tableName+"") ;
				if(where != null && where.length == 1) {
					sql.append(where[0]);
				}
				statement = connection.prepareStatement(sql.toString());
				resultset= statement.executeQuery();
				return resultSetMapper.mapRow(resultset, zClass);
			}catch(SQLException e ) {
				System.out.println(e.getMessage());
				return new ArrayList<>();
			}finally {
				try {
					connection.close();
					statement.close();
					resultset.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return new ArrayList<>();
	}

}
