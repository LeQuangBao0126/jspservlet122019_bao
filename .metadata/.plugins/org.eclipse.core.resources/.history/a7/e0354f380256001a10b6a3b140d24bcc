package com.laptrinhjavaweb.repository.impl;




import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.laptrinhjavaweb.builder.BuildingBuilder;
import com.laptrinhjavaweb.entity.BuildingEntity;
import com.laptrinhjavaweb.repository.IBuildingRepository;
import com.laptrinhjavaweb.repository.SimpleJPARepository;




public class BuildingRepository extends SimpleJPARepository<BuildingEntity> implements IBuildingRepository {

	@Override
	public void insert(BuildingEntity entity) {
		super.save(entity);
	}

	@Override
	public void update(BuildingEntity entity) {
		super.edit(entity);
	}

	@Override
	public void delete(Long id) {
		super.delete(id);
	}

	@Override
	public List<BuildingEntity> findAll(Map<String, Object> params, BuildingBuilder builder) {
		StringBuilder sql = new StringBuilder("select * from building b ");
		if(builder.getStaffId() != null) {
			sql.append(" inner join assignmentbuilding ab on b.id = ab.buildingid");
		}
		sql.append(" where 1=1");
		sql = super.createSQLfindAllCommon(sql, params);
		sql = this.createSQLSpecial(sql, builder);
		System.out.println(sql.toString());
		return this.findAll(sql.toString());
	}
	
	
	private StringBuilder createSQLSpecial(StringBuilder sql, BuildingBuilder builder) {
		if (StringUtils.isNotBlank(builder.getRentAreaFrom()) || StringUtils.isNotBlank(builder.getRentAreaTo())) {
			sql.append(" and exists (select * from rentarea ra where (b.id = ra.buildingid ");
			if (StringUtils.isNotBlank(builder.getRentAreaFrom())) {
				sql.append(" and ra.value >= "+builder.getRentAreaFrom()+"");
			}
			if (StringUtils.isNotBlank(builder.getRentAreaTo())) {
				sql.append(" and ra.value <= "+builder.getRentAreaTo()+"");
			}
			sql.append("))");
		}
		//type[]
		if(builder.getTypes().length > 0) {
			sql.append("and ( ");
			for(String type : builder.getTypes()) {
				if(builder.getTypes()[0].equals(type)) {
					sql.append(" b.type like '%"+type+"%'");
				}else {
					sql.append(" or b.type like '%"+type+"%'");
				}
			}
			//java 8
			/*String sqlType = Arrays.stream(builder.getTypes()).map(item -> "b.type like '%"+builder.getTypes()+"%'")
					.collect(Collectors.joining(" OR ")).toString();*/
			sql.append(")");
		}
		//rentcostfrom and rentcostto
		if(StringUtils.isNotBlank(builder.getRentCostFrom()) ) {
			sql.append(" and b.rentcost >= "+builder.getRentCostFrom()+"");
		}
		if(StringUtils.isNotBlank(builder.getRentCostTo()) ) {
			sql.append(" and b.rentcost >= "+builder.getRentCostTo()+"");
		}
		if(builder.getStaffId() != null && builder.getStaffId() != -1 ) {
			sql.append(" and ab.staffid = "+builder.getStaffId()+"");
		}		
		return sql;
	}


	
	
	
}
