package com.laptrinhjavaweb.service.impl;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.laptrinhjavaweb.service.IBuildingService;



public class BuildingService implements IBuildingService {
	private BuildingConverter buildingConverter = new BuildingConverter();
	private IBuildingRepository buildingRepository = new BuildingRepository();
	
	@Override
	public void insert(BuildingDTO dto) {		
		  BuildingEntity entity = buildingConverter.convertDTOToEntity(dto);
		  buildingRepository.insert(entity);
	}

	@Override
	public void update(BuildingDTO dto) {
		BuildingEntity entity = buildingConverter.convertDTOToEntity(dto);
		buildingRepository.update(entity);
	}

	@Override
	public void delete(Long id) {
		buildingRepository.delete(id);
	}

	@Override
	public List<BuildingDTO> findAll(BuildingBuilder builder) {
		// bth là params.put(name,builder.getName()) nhiều quá thì build làm tự động
		Map<String,Object> params = convertToMapProperties(builder);
		//thằng param chhỉ cchứa nhửng field và giá trị của String và số ..còn những speical case dựa vào builder
		//nen vẫn giữ builder để truyền vào
		List<BuildingEntity> listentity = buildingRepository.findAll(params, builder);
		List<BuildingDTO> listdto = new ArrayList<>();
		for(BuildingEntity entity : listentity) {
			 BuildingDTO dto = buildingConverter.convertEntityToDTO(entity);
			 listdto.add(dto);
		}
		return listdto;
	}

	private Map<String, Object> convertToMapProperties(BuildingBuilder builder) {
		Map<String, Object> params = new HashMap<>();
		try {
			Field[] fields = BuildingBuilder.class.getDeclaredFields();
			for(Field field : fields) {
				String fieldName = field.getName();
				if(!fieldName.startsWith("rentArea") && !fieldName.equals("types") && !fieldName.equals("staffId")
				&& !fieldName.startsWith("rentCost")){
					field.setAccessible(true);
					if(field.get(builder) instanceof String) {
						params.put(field.getName().toLowerCase(), field.get(builder));
					}else {
						if (field.get(builder) != null && StringUtils.isNotEmpty((String) field.get(builder))) {
							params.put(field.getName().toLowerCase(),
									Integer.parseInt(field.get(builder).toString()));
						}
					}
				}	
			}
		}catch(IllegalAccessException e){
			System.out.println(e.getMessage());
			return null;
		}
		return params;
	}
}
